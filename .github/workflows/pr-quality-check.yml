name: üîç PR Code Quality Check

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: üìã Analyze Code Quality
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: üì¶ Install tools
      run: |
        python -m pip install --upgrade pip
        pip install black pylint mypy
        
    - name: üé® Check Black formatting
      id: black-check
      run: |
        echo "## üé® Black Formatting Check" >> $GITHUB_STEP_SUMMARY
        
        if black --check --diff . > black_output.txt 2>&1; then
          echo "‚úÖ **Code is properly formatted**" >> $GITHUB_STEP_SUMMARY
          echo "black_status=‚úÖ Passed" >> $GITHUB_OUTPUT
        else
          echo "‚ùå **Formatting issues found**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run \`black .\` to fix formatting:" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          cat black_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "black_status=‚ùå Failed" >> $GITHUB_OUTPUT
        fi
        
    - name: üîç Check mypy types
      id: mypy-check
      run: |
        echo "## üîç mypy Type Checking" >> $GITHUB_STEP_SUMMARY
        
        if mypy --ignore-missing-imports --no-strict-optional . > mypy_output.txt 2>&1; then
          echo "‚úÖ **No type issues found**" >> $GITHUB_STEP_SUMMARY
          echo "mypy_status=‚úÖ Clean" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è **Type checking issues found:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat mypy_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "mypy_status=‚ö†Ô∏è Issues found" >> $GITHUB_OUTPUT
        fi
        
    - name: üìä Run Pylint analysis
      id: pylint-check
      run: |
        echo "## üìä Pylint Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º pylint –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
        pylint --output-format=text --reports=no --score=yes **/*.py > pylint_output.txt 2>&1 || true
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
        SCORE=$(grep "Your code has been rated at" pylint_output.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
        
        if [[ -n "$SCORE" ]]; then
          echo "üìä **Pylint Score: $SCORE/10.0**" >> $GITHUB_STEP_SUMMARY
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –æ—Ü–µ–Ω–∫–µ
          if (( $(echo "$SCORE >= 8.0" | bc -l) )); then
            echo "üåü **Excellent code quality!**" >> $GITHUB_STEP_SUMMARY
            echo "pylint_status=üåü Excellent ($SCORE/10)" >> $GITHUB_OUTPUT
          elif (( $(echo "$SCORE >= 7.0" | bc -l) )); then
            echo "‚úÖ **Good code quality**" >> $GITHUB_STEP_SUMMARY
            echo "pylint_status=‚úÖ Good ($SCORE/10)" >> $GITHUB_OUTPUT
          elif (( $(echo "$SCORE >= 5.0" | bc -l) )); then
            echo "‚ö†Ô∏è **Code quality needs improvement**" >> $GITHUB_STEP_SUMMARY
            echo "pylint_status=‚ö†Ô∏è Needs improvement ($SCORE/10)" >> $GITHUB_OUTPUT
          else
            echo "‚ùå **Poor code quality**" >> $GITHUB_STEP_SUMMARY
            echo "pylint_status=‚ùå Poor ($SCORE/10)" >> $GITHUB_OUTPUT
          fi
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
          if grep -q "************* Module" pylint_output.txt; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Detailed Issues:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat pylint_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚ùå **Could not determine Pylint score**" >> $GITHUB_STEP_SUMMARY
          echo "pylint_status=‚ùå Error" >> $GITHUB_OUTPUT
        fi
        
    - name: üìù Create PR comment
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const blackStatus = '${{ steps.black-check.outputs.black_status }}';
          const mypyStatus = '${{ steps.mypy-check.outputs.mypy_status }}';
          const pylintStatus = '${{ steps.pylint-check.outputs.pylint_status }}';
          
          const comment = `## üîç Code Quality Report
          
          | Tool | Status | Description |
          |------|--------|-------------|
          | üé® **Black** | ${blackStatus} | Auto-formatting check |
          | üîç **mypy** | ${mypyStatus} | Type checking |
          | üìä **Pylint** | ${pylintStatus} | Code quality analysis |
          
          ### üí° How to fix issues:
          \`\`\`bash
          # Fix formatting
          black .
          
          # Check types  
          mypy .
          
          # Analyze quality
          pylint your_file.py
          \`\`\`
          
          ### üéØ Quality Guidelines:
          - **Black**: Auto-formats code (run locally)
          - **mypy**: Add type hints for better code
          - **Pylint**: Aim for 8.0+ score for excellent quality
          
          ---
          *This check runs automatically on every PR. Issues don't block merge, but fixing them improves code quality! üöÄ*`;
          
          // –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üîç Code Quality Report')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          } 